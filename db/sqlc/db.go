// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createHotelStmt, err = db.PrepareContext(ctx, createHotel); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHotel: %w", err)
	}
	if q.createReservationStmt, err = db.PrepareContext(ctx, createReservation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReservation: %w", err)
	}
	if q.createRoomStmt, err = db.PrepareContext(ctx, createRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoom: %w", err)
	}
	if q.deleteHotelStmt, err = db.PrepareContext(ctx, deleteHotel); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHotel: %w", err)
	}
	if q.deleteReservationStmt, err = db.PrepareContext(ctx, deleteReservation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReservation: %w", err)
	}
	if q.deleteRoomStmt, err = db.PrepareContext(ctx, deleteRoom); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRoom: %w", err)
	}
	if q.getAvailableRoomsStmt, err = db.PrepareContext(ctx, getAvailableRooms); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailableRooms: %w", err)
	}
	if q.getHotelStmt, err = db.PrepareContext(ctx, getHotel); err != nil {
		return nil, fmt.Errorf("error preparing query GetHotel: %w", err)
	}
	if q.getReservationStmt, err = db.PrepareContext(ctx, getReservation); err != nil {
		return nil, fmt.Errorf("error preparing query GetReservation: %w", err)
	}
	if q.getReservationsByDateRangeStmt, err = db.PrepareContext(ctx, getReservationsByDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetReservationsByDateRange: %w", err)
	}
	if q.getRoomStmt, err = db.PrepareContext(ctx, getRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoom: %w", err)
	}
	if q.listHotelsStmt, err = db.PrepareContext(ctx, listHotels); err != nil {
		return nil, fmt.Errorf("error preparing query ListHotels: %w", err)
	}
	if q.listHotelsByDestinationStmt, err = db.PrepareContext(ctx, listHotelsByDestination); err != nil {
		return nil, fmt.Errorf("error preparing query ListHotelsByDestination: %w", err)
	}
	if q.listReservationsStmt, err = db.PrepareContext(ctx, listReservations); err != nil {
		return nil, fmt.Errorf("error preparing query ListReservations: %w", err)
	}
	if q.listReservationsByRoomStmt, err = db.PrepareContext(ctx, listReservationsByRoom); err != nil {
		return nil, fmt.Errorf("error preparing query ListReservationsByRoom: %w", err)
	}
	if q.listReservationsByUserStmt, err = db.PrepareContext(ctx, listReservationsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListReservationsByUser: %w", err)
	}
	if q.listRoomsStmt, err = db.PrepareContext(ctx, listRooms); err != nil {
		return nil, fmt.Errorf("error preparing query ListRooms: %w", err)
	}
	if q.listRoomsByHotelStmt, err = db.PrepareContext(ctx, listRoomsByHotel); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoomsByHotel: %w", err)
	}
	if q.updateHotelStmt, err = db.PrepareContext(ctx, updateHotel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHotel: %w", err)
	}
	if q.updateReservationStmt, err = db.PrepareContext(ctx, updateReservation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReservation: %w", err)
	}
	if q.updateReservationStatusStmt, err = db.PrepareContext(ctx, updateReservationStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReservationStatus: %w", err)
	}
	if q.updateRoomStmt, err = db.PrepareContext(ctx, updateRoom); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoom: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createHotelStmt != nil {
		if cerr := q.createHotelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHotelStmt: %w", cerr)
		}
	}
	if q.createReservationStmt != nil {
		if cerr := q.createReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReservationStmt: %w", cerr)
		}
	}
	if q.createRoomStmt != nil {
		if cerr := q.createRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoomStmt: %w", cerr)
		}
	}
	if q.deleteHotelStmt != nil {
		if cerr := q.deleteHotelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHotelStmt: %w", cerr)
		}
	}
	if q.deleteReservationStmt != nil {
		if cerr := q.deleteReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReservationStmt: %w", cerr)
		}
	}
	if q.deleteRoomStmt != nil {
		if cerr := q.deleteRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoomStmt: %w", cerr)
		}
	}
	if q.getAvailableRoomsStmt != nil {
		if cerr := q.getAvailableRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailableRoomsStmt: %w", cerr)
		}
	}
	if q.getHotelStmt != nil {
		if cerr := q.getHotelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHotelStmt: %w", cerr)
		}
	}
	if q.getReservationStmt != nil {
		if cerr := q.getReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReservationStmt: %w", cerr)
		}
	}
	if q.getReservationsByDateRangeStmt != nil {
		if cerr := q.getReservationsByDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReservationsByDateRangeStmt: %w", cerr)
		}
	}
	if q.getRoomStmt != nil {
		if cerr := q.getRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomStmt: %w", cerr)
		}
	}
	if q.listHotelsStmt != nil {
		if cerr := q.listHotelsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHotelsStmt: %w", cerr)
		}
	}
	if q.listHotelsByDestinationStmt != nil {
		if cerr := q.listHotelsByDestinationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHotelsByDestinationStmt: %w", cerr)
		}
	}
	if q.listReservationsStmt != nil {
		if cerr := q.listReservationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReservationsStmt: %w", cerr)
		}
	}
	if q.listReservationsByRoomStmt != nil {
		if cerr := q.listReservationsByRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReservationsByRoomStmt: %w", cerr)
		}
	}
	if q.listReservationsByUserStmt != nil {
		if cerr := q.listReservationsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReservationsByUserStmt: %w", cerr)
		}
	}
	if q.listRoomsStmt != nil {
		if cerr := q.listRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomsStmt: %w", cerr)
		}
	}
	if q.listRoomsByHotelStmt != nil {
		if cerr := q.listRoomsByHotelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomsByHotelStmt: %w", cerr)
		}
	}
	if q.updateHotelStmt != nil {
		if cerr := q.updateHotelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHotelStmt: %w", cerr)
		}
	}
	if q.updateReservationStmt != nil {
		if cerr := q.updateReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReservationStmt: %w", cerr)
		}
	}
	if q.updateReservationStatusStmt != nil {
		if cerr := q.updateReservationStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReservationStatusStmt: %w", cerr)
		}
	}
	if q.updateRoomStmt != nil {
		if cerr := q.updateRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createHotelStmt                *sql.Stmt
	createReservationStmt          *sql.Stmt
	createRoomStmt                 *sql.Stmt
	deleteHotelStmt                *sql.Stmt
	deleteReservationStmt          *sql.Stmt
	deleteRoomStmt                 *sql.Stmt
	getAvailableRoomsStmt          *sql.Stmt
	getHotelStmt                   *sql.Stmt
	getReservationStmt             *sql.Stmt
	getReservationsByDateRangeStmt *sql.Stmt
	getRoomStmt                    *sql.Stmt
	listHotelsStmt                 *sql.Stmt
	listHotelsByDestinationStmt    *sql.Stmt
	listReservationsStmt           *sql.Stmt
	listReservationsByRoomStmt     *sql.Stmt
	listReservationsByUserStmt     *sql.Stmt
	listRoomsStmt                  *sql.Stmt
	listRoomsByHotelStmt           *sql.Stmt
	updateHotelStmt                *sql.Stmt
	updateReservationStmt          *sql.Stmt
	updateReservationStatusStmt    *sql.Stmt
	updateRoomStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createHotelStmt:                q.createHotelStmt,
		createReservationStmt:          q.createReservationStmt,
		createRoomStmt:                 q.createRoomStmt,
		deleteHotelStmt:                q.deleteHotelStmt,
		deleteReservationStmt:          q.deleteReservationStmt,
		deleteRoomStmt:                 q.deleteRoomStmt,
		getAvailableRoomsStmt:          q.getAvailableRoomsStmt,
		getHotelStmt:                   q.getHotelStmt,
		getReservationStmt:             q.getReservationStmt,
		getReservationsByDateRangeStmt: q.getReservationsByDateRangeStmt,
		getRoomStmt:                    q.getRoomStmt,
		listHotelsStmt:                 q.listHotelsStmt,
		listHotelsByDestinationStmt:    q.listHotelsByDestinationStmt,
		listReservationsStmt:           q.listReservationsStmt,
		listReservationsByRoomStmt:     q.listReservationsByRoomStmt,
		listReservationsByUserStmt:     q.listReservationsByUserStmt,
		listRoomsStmt:                  q.listRoomsStmt,
		listRoomsByHotelStmt:           q.listRoomsByHotelStmt,
		updateHotelStmt:                q.updateHotelStmt,
		updateReservationStmt:          q.updateReservationStmt,
		updateReservationStatusStmt:    q.updateReservationStatusStmt,
		updateRoomStmt:                 q.updateRoomStmt,
	}
}
