// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reservation.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservation (
  reservation_id,
  room_id,
  user_id,
  start_date,
  end_date,
  status,
  created_at,
  created_by,
  update_at,
  update_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by
`

type CreateReservationParams struct {
	ReservationID uuid.UUID      `json:"reservation_id"`
	RoomID        uuid.NullUUID  `json:"room_id"`
	UserID        sql.NullString `json:"user_id"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
	Status        sql.NullString `json:"status"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	CreatedBy     uuid.NullUUID  `json:"created_by"`
	UpdateAt      sql.NullTime   `json:"update_at"`
	UpdateBy      uuid.NullUUID  `json:"update_by"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.queryRow(ctx, q.createReservationStmt, createReservation,
		arg.ReservationID,
		arg.RoomID,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdateAt,
		arg.UpdateBy,
	)
	var i Reservation
	err := row.Scan(
		&i.ReservationID,
		&i.RoomID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdateAt,
		&i.UpdateBy,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservation
WHERE reservation_id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, reservationID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteReservationStmt, deleteReservation, reservationID)
	return err
}

const getReservation = `-- name: GetReservation :one
SELECT reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by FROM reservation
WHERE reservation_id = $1 LIMIT 1
`

func (q *Queries) GetReservation(ctx context.Context, reservationID uuid.UUID) (Reservation, error) {
	row := q.queryRow(ctx, q.getReservationStmt, getReservation, reservationID)
	var i Reservation
	err := row.Scan(
		&i.ReservationID,
		&i.RoomID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdateAt,
		&i.UpdateBy,
	)
	return i, err
}

const getReservationsByDateRange = `-- name: GetReservationsByDateRange :many
SELECT reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by FROM reservation
WHERE room_id = $1
  AND status = $2
  AND (
    (start_date <= $3 AND end_date > $3) OR
    (start_date < $4 AND end_date >= $4) OR
    (start_date >= $3 AND end_date <= $4)
  )
ORDER BY start_date
`

type GetReservationsByDateRangeParams struct {
	RoomID      uuid.NullUUID  `json:"room_id"`
	Status      sql.NullString `json:"status"`
	StartDate   sql.NullTime   `json:"start_date"`
	StartDate_2 sql.NullTime   `json:"start_date_2"`
}

func (q *Queries) GetReservationsByDateRange(ctx context.Context, arg GetReservationsByDateRangeParams) ([]Reservation, error) {
	rows, err := q.query(ctx, q.getReservationsByDateRangeStmt, getReservationsByDateRange,
		arg.RoomID,
		arg.Status,
		arg.StartDate,
		arg.StartDate_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ReservationID,
			&i.RoomID,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdateAt,
			&i.UpdateBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservations = `-- name: ListReservations :many
SELECT reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by FROM reservation
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListReservationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReservations(ctx context.Context, arg ListReservationsParams) ([]Reservation, error) {
	rows, err := q.query(ctx, q.listReservationsStmt, listReservations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ReservationID,
			&i.RoomID,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdateAt,
			&i.UpdateBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservationsByRoom = `-- name: ListReservationsByRoom :many
SELECT reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by FROM reservation
WHERE room_id = $1
ORDER BY start_date
LIMIT $2
OFFSET $3
`

type ListReservationsByRoomParams struct {
	RoomID uuid.NullUUID `json:"room_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListReservationsByRoom(ctx context.Context, arg ListReservationsByRoomParams) ([]Reservation, error) {
	rows, err := q.query(ctx, q.listReservationsByRoomStmt, listReservationsByRoom, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ReservationID,
			&i.RoomID,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdateAt,
			&i.UpdateBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservationsByUser = `-- name: ListReservationsByUser :many
SELECT reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by FROM reservation
WHERE user_id = $1
ORDER BY start_date DESC
LIMIT $2
OFFSET $3
`

type ListReservationsByUserParams struct {
	UserID sql.NullString `json:"user_id"`
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
}

func (q *Queries) ListReservationsByUser(ctx context.Context, arg ListReservationsByUserParams) ([]Reservation, error) {
	rows, err := q.query(ctx, q.listReservationsByUserStmt, listReservationsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ReservationID,
			&i.RoomID,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdateAt,
			&i.UpdateBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE reservation
SET 
  room_id = $2,
  user_id = $3,
  start_date = $4,
  end_date = $5,
  status = $6,
  update_at = $7,
  update_by = $8
WHERE reservation_id = $1
RETURNING reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by
`

type UpdateReservationParams struct {
	ReservationID uuid.UUID      `json:"reservation_id"`
	RoomID        uuid.NullUUID  `json:"room_id"`
	UserID        sql.NullString `json:"user_id"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
	Status        sql.NullString `json:"status"`
	UpdateAt      sql.NullTime   `json:"update_at"`
	UpdateBy      uuid.NullUUID  `json:"update_by"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.queryRow(ctx, q.updateReservationStmt, updateReservation,
		arg.ReservationID,
		arg.RoomID,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.UpdateAt,
		arg.UpdateBy,
	)
	var i Reservation
	err := row.Scan(
		&i.ReservationID,
		&i.RoomID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdateAt,
		&i.UpdateBy,
	)
	return i, err
}

const updateReservationStatus = `-- name: UpdateReservationStatus :one
UPDATE reservation
SET 
  status = $2,
  update_at = $3,
  update_by = $4
WHERE reservation_id = $1
RETURNING reservation_id, room_id, user_id, start_date, end_date, status, created_at, created_by, update_at, update_by
`

type UpdateReservationStatusParams struct {
	ReservationID uuid.UUID      `json:"reservation_id"`
	Status        sql.NullString `json:"status"`
	UpdateAt      sql.NullTime   `json:"update_at"`
	UpdateBy      uuid.NullUUID  `json:"update_by"`
}

func (q *Queries) UpdateReservationStatus(ctx context.Context, arg UpdateReservationStatusParams) (Reservation, error) {
	row := q.queryRow(ctx, q.updateReservationStatusStmt, updateReservationStatus,
		arg.ReservationID,
		arg.Status,
		arg.UpdateAt,
		arg.UpdateBy,
	)
	var i Reservation
	err := row.Scan(
		&i.ReservationID,
		&i.RoomID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdateAt,
		&i.UpdateBy,
	)
	return i, err
}
